#!/usr/bin/env php
<?php

ini_set('display_errors', 0);
error_reporting(0);

$opts  = getopt('esth');
$empty = array_key_exists('e', $opts);
$short = array_key_exists('s', $opts);
$test  = array_key_exists('t', $opts);

if (array_key_exists('h', $opts)) {
    e();
    e('Usage:', $argv[0], '[options]');
    e();
    e('Options:');
    e('    -e  Generate empty template config file');
    e('    -s  Generate short config file without comments');
    e('    -t  Test mode, don\'t create file, just show result');
    e('    -h  This help');
    e();
    exit;
}

define('DS', DIRECTORY_SEPARATOR);

$cwd = getcwd();

/**
 * Let's go
 */
$file = $cwd.'/dist/configure.json';

if (!file_exists($file)) {
    e('Missing configuration file:', $file);
    exit(1);
}

if ($test) {
    e();
    e('Test mode, don\'t create file');
}

e();
e('Configuration file:');
e($file);

$json = stripJSON(file_get_contents($file));

$c = json_decode($json, TRUE);

if (($err = json_last_error()) != JSON_ERROR_NONE) {
    e();
    e('ERROR:', json_last_error_msg());
    e();
    exit(127);
}

$c0 = &$c[0];
$c1 = &$c[1];

// Common data
if (!empty($c0)) {
    // Show header only if also multiple section occur
    !empty($c1) AND h('Common settings');
    foreach ($c0 as $id => $data) $c0[$id] = readValue($data);
}

$n = 0;

// Multiple data
if (!empty($c1)) {
    h('Multiple settings');
    do {
        h('Section '.++$n);
        foreach ($c1 as $id => $data) {
            $data = readValue($data);
            $data['_value'][$n] = $data['value'];
            $data['value'] = '';
            $c1[$id] = $data;
        }
        echo PHP_EOL, 'More (y|n) [n] ? ';
    } while (trim(fgets(STDIN)) == 'y');
}

/**
 * Generate config file
 */

$cfg = array();

cfgComment('Generated from', str_replace(dirname($cwd), '.', $file));

if (!empty($c0)) {
    cfgEmptyLine();
    cfgComment('Common settings');

    foreach ($c0 as $data) {
        cfgEmptyLine();
        cfgCommentSeparator();
        cfgCommentContent($data['description']);
        if (!empty($data['values'])) {
            cfgCommentContent('Allowed values: '.implode(', ', $data['values']));
        }
        if ($data['required']) {
            $name = $data['name'];
            cfgCommentContent('required');
        } else {
            $name = '#' . $data['name'];
            $opt = 'optional';
            if (!empty($data['default'])) {
                $opt .= ', default '.$data['default'];
            }
            cfgCommentContent($opt);
        }
        cfgCommentSeparator();
        cfgKeyValue($name, $data['value'] != '' ? $data['value'] : $data['default']);
    }
}

for ($i=1; $i<=$n; $i++) {
    cfgEmptyLine();
    cfgComment('Section', $i);
    foreach ($c1 as $data) {
        cfgEmptyLine();
        cfgComment($data['description']);
        cfgKeyValue($data['name'].'_'.$i, @$data['_value'][$i]);
    }
}

cfgEmptyLine();
e();

if ($test) {
    e(implode(PHP_EOL, $cfg));
} else {
    $conf = 'config';
    e('- Configuration file name (without ".conf")');
    echo '['.$conf.'] ? ';
    $file = trim(fgets(STDIN));
    $file = $cwd.DS.($file?:$conf).'.conf';

    e();
    file_put_contents($file, implode(PHP_EOL, $cfg));
    e('Saved to', $file);
}

// ###########################################################################
// Functions
// ###########################################################################

/**
 * Configuration empty line
 */
function cfgEmptyLine() {
    global $short, $cfg;
    if (!$short) $cfg[] = NULL;
}

/**
 * Configuration Comment
 */
function cfgComment() {
    global $short, $cfg;
    if ($short) return;
    cfgCommentSeparator();
    call_user_func_array(cfgCommentContent, func_get_args());
    cfgCommentSeparator();
}

function cfgCommentSeparator() {
    global $short, $cfg;
    if ($short) return;
    $cfg[] = '##############################################################################';
}

function cfgCommentContent() {
    global $short, $cfg;
    if ($short) return;
    $cfg[] = '### '.implode(' ', func_get_args());
}

/**
 * Configuration Key = Value
 */
function cfgKeyValue($k, $v ) {
    global $cfg;
    $cfg[] = ($v != '' && !strstr($v, ' ') && is_numeric($v))
           ? sprintf('%-15s %s', $k, $v)
           : sprintf('%-15s "%s"', $k, $v);
//     $cfg[] = ($v == '' || strstr($v, ' '))
//            ? sprintf('%-15s "%s"', $k, $v)
//            : sprintf('%-15s %s', $k, $v);
}

/**
 * echo wrapper with newline
 */
function e() {
    echo implode(' ', func_get_args()),PHP_EOL;
}

/**
 * Header
 */
function h() {
    echo PHP_EOL, '---------- ', implode(func_get_args()), ' ----------', PHP_EOL;
}

/**
 * Remove comments from JSON
 */
function stripJSON( $json ) {
    $result = '';
    // Tokenize JSON and remove all comments and whitespaces
    foreach (token_get_all('<?php '.$json) as $token) {
        // if (is_array($token)) { $token[] = token_name($token[0]); print_r($token); }
        if (!is_array($token)) {
            $result .= $token;
        } elseif ($token[0] == T_CONSTANT_ENCAPSED_STRING || $token[0] == T_LNUMBER) {
            $result .= $token[1];
        }
    }
    return $result;
}

/**
 * Read values for key fron STDIN
 */
function readValue( $key ) {
    $key = array_merge(
        array(
            'type'     => 's',
            'values'   => array(),
            'default'  => '',
            'value'    => '',
            'required' => 0,
            'help'     => ''
        ),
        $key
    );

    if ($key['value'] == '') $key['value'] = $key['default'];

    // Handle boolean data via valid values array
    if ($key['type'] == 'b') $key['values'] = array('y', 'n');

    $err = FALSE;
    do {
        e();
        $msg = $key['description'];
        if ($key['required']) {
            $msg .= ' (required)';
        }
        e('-', $msg);
        if ($key['help']) e('-', $key['help']);
        if ($err) e('!', $err);
        if (!empty($key['values'])) echo '('.implode('|', $key['values']).') ';
        if (!empty($key['value'])) echo '['.$key['value'].'] ';
        echo ': ';

        $err = false;

        $v = trim(fgets(STDIN));

        if ($v == '') $v = $key['value'];

        if ($v != '') {
            $key['value'] = $v;

            switch ($key['type']) {
                case 'i':
                    if ($key['value'] != '' && !is_int($key['value'])) {
                        $err = 'Integer value required';
                        $key['value'] = null;
                    }
                    break;
                case 'n':
                    if (!is_numeric($key['value'])) {
                        $err = 'Numeric value required';
                        $key['value'] = null;
                    }
                    break;
                default:
                    if (!empty($key['values']) && !in_array($key['value'], $key['values'])) {
                        $err = 'Invalid value: ' . $key['value'];
                        $key['value'] = $key['default'];
                    }
            }
        } elseif ($key['required']) {
            $err = 'Value is required';
        }

    } while ($err);

    return $key;
}
